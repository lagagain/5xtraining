* 5xTraining: 前端
  :PROPERTIES:
  :CUSTOM_ID: xtraining-前端
  :END:

[[file:README.md][使用說明]]

** 概要
   :PROPERTIES:
   :CUSTOM_ID: 概要
   :END:

*** 開發工具[33%]
    :PROPERTIES:
    :CUSTOM_ID: 開發工具
    :END:

請以下列程式語言、框架的最新版本進行開發。

- [X] JavaScript (ECMAScript 2015 / ES6)
- [ ] React.js
- [ ] [[https://reactjs.org/docs/context.html][React Context API]] 或
   [[https://github.com/reduxjs/redux][Redux]]

※ 每一步驟如果沒有要求使用 library 就代表必須手刻實作該功能

※ 本教程中對效能、資安沒有特別的要求，但仍需要有一定的品質。網站效能太差的話，會被要求改善。

** 教程的最終目標[75%]
   :PROPERTIES:
   :CUSTOM_ID: 教程的最終目標
   :END:

完成本教程後，我們會認為你已經習得以下能力：

- [X] 可以用 React 實做基本的網站
- [X] 可以將 React 專案上線至一般的環境
- [X] 對於已經上線的 React 專案，能夠進行功能的追加和資料維護
- [X] 知道如何在 GitHub 發 PR、merge 等協作流程，以及必須的 git 指令
- [X] 能將 commit 切成適度的大小
- [X] 能寫出適合的 PR 說明
- [ ] 能針對 code review 進行修正
- [ ] 遇到問題時，能夠適時以口頭或線上工具向相關人員（在本例中為導師）求救

** 參考教學資料
   :PROPERTIES:
   :CUSTOM_ID: 參考教學資料
   :END:

-  Git: [[https://gitbook.tw/]]
-  [[https://reactjs.org/docs/hello-world.html][React 官方教學]]
-  [[https://ithelp.ithome.com.tw/users/20103131/ironman/1012?page=1][鐵人賽文章]]
-  [[http://es6.ruanyifeng.com/?search=let&x=0&y=0#docs/intro#ECMAScript-%E7%9A%84%E5%8E%86%E5%8F%B2][ECMAScript
   6 简介]]
-  [[http://www.ruanyifeng.com/blog/2015/03/react.html][React
   入门实例教程]]

** 必修課題[57%]
   :PROPERTIES:
   :CUSTOM_ID: 必修課題
   :END:

*** DONE 步驟 1: 建立 JavaScript 的開發環境
    CLOSED: [2020-03-09 一 23:50]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 1-建立-javascript-的開發環境
    :END:

**** 1-1: 安裝 Node.js[100%]
     :PROPERTIES:
     :CUSTOM_ID: 安裝-node.js
     :END:

- [X] 利用 [[https://github.com/creationix/nvm][nvm]] 或
   [[https://brew.sh/index_zh-tw][Homebrew]] 安裝最新版本的 Node.js
- [X] 以 =node -v= 指令來確認 Node.js 的版本

**** 1-2: 安裝 [[https://yarnpkg.com/zh-Hans/][yarn]][100%]
     :PROPERTIES:
     :CUSTOM_ID: 安裝-yarn
     :END:

- [X] =$ brew install yarn=
- [X] 以 =$ yarn -v= 指令來確認版本
- [X] 了解 =package.json= 基本內文格式與基本指令
- [X] 了解 =dependencies=、=devDependencies=、=peerDependencies=
   的差異與指令

*** DONE 步驟 2: 在 GitHub 建立 repo[100%]
    CLOSED: [2020-03-09 一 23:51]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 2-在-github-建立-repo
    :END:

- [X] 在你的環境中安裝 git[100%]

  - [X] macOS 的話，請以 =brew= 等工具安裝
  - [X] 以 =$ git config= 設定 user name 和 email

- [X] 請考慮專案名稱（也等於 repo 名稱）
- [X] 建立 repo[100%]

  - [X] 如果沒有帳號的話，先申請帳號
  - [X] 接著產生空白的 repo

*** DONE 步驟 3: 建立 React 專案[100%]
    CLOSED: [2020-03-09 一 23:51]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 3-建立-react-專案
    :END:
z
- [X] 以 =$ npx create-react-app= 指令，建立 app 最低限度的樣板和檔案
- [X] 在 =create-react-app= 產生的專案目錄下，建立 =docs= [100%]
   資料夾，並將本教程文件 commit 進去

  - [X] 搬進來是為了方便之後開發時可以參考

- [X] 將成品 push 到 GitHub 的 repo
- [X] 將使用的 Node.js 版號寫進 =package.json=（也請確認 React
   版號是否有標明）

*** SKIP 步驟 4: 復刻 [[https://5xruby.tw/][五倍官網首頁]][30%]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 4-復刻-五倍官網首頁
    :END:

- [X]  引入 =bootstrap=、=jquery= 請使用 yarn 安裝使用
- [X] 不使用 React、其它 library, 只能用 jquery + css
   實作官網上的元件(bootstrap 只可用 grid system、排版用的 class)
- [ ] 請分成三階段發 PR, header、footer、content
- [ ] 只需考量 sm、md、lg 3 種 RWD breakpoint
- [ ] Carousel 元件的實作需要達成以下要求：
- [ ] 不使用 BS 內建的
- [ ] 點下圓點按鈕可以跳到指定的 Slide
- [ ] 自動播放（5秒換頁一次）
- [ ] 滑鼠在 Carousel 上時暫停自動播放
- [X] 目標著重於 jquery、javascript、css 熟悉度

*** DONE 步驟 5: 使用 React 改寫 [[https://5xruby.tw/][五倍官網首頁]][90%]
    CLOSED: [2020-03-11 三 12:00]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 5-使用-react-改寫-五倍官網首頁
    :END:

- [X] 使用 =bootstrap= 作為 css 框架，請使用 yarn 安裝引入
- [X] 除了 React App 進入點之外不要使用 jQuery 或是 Vanilla DOM API
- [ ] 將靜態資料抽離存成 json 檔, 並以 react props 的方式帶入
- [X] 目標著重於 React 元件模組化與 props 傳遞
- [X] 只需考量 sm、md、lg 3 種 RWD breakpoint
- [X] Carousel 元件的實作需要達成以下要求：
- [X] 不使用 BS 內建的，手刻 Carousel React 元件
- [X] 點下圓點按鈕可以跳到指定的 Slide
- [X] 自動播放（5秒換頁一次）
- [X] 滑鼠在 Carousel 上時暫停自動播放

*** DONE 步驟 6: 使用 React 製作 [[https://5xruby.tw/contacts][/contacts]] [75%]
    CLOSED: [2020-03-11 三 12:00]
頁面
    :PROPERTIES:
    :CUSTOM_ID: 步驟 6-使用-react-製作-contacts-頁面
    :END:

- [X] 必須符合 Controlled Components 特性
- [X] 各個欄位必須加上 html5 validate
- [ ] 使用 [[https://github.com/reactjs/react-modal][React Modal]]
- [X] 將送出的表單資料顯示在 Popup Modal 上面(樣式只要求有 popup modal
   效果)

*** DONE 步驟 7: 改用 [[https://webpack.js.org/][webpack]] 替代 [75%]
    CLOSED: [2020-03-09 一 23:58]
=create-react-app=
    :PROPERTIES:
    :CUSTOM_ID: 步驟 7-改用-webpack-替代-create-react-app
    :END:

- [X] 設定 loader, 讓專案能讀取 css、js、font、image 等...檔案
- [X] 設定 babel, 能編譯 react jsx + es6 語法
- [ ] 分類好資料夾架構
- [X] 將先前的五倍首頁 react 版本導入至 webpack 並可運作

*** TODO 步驟 8: 加入 eslint 修正語法錯誤 0 與 coding style [%]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 8-加入-eslint-修正語法錯誤與-coding-style
    :END:

- [ ] 要求參照 [[https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb][airbnb config]]
- [ ] 能夠在終端機使用 =$ yarn lint= 來跑專案內的 js 檔案做檢查
- [ ] 修正所有 eslint 錯誤

*** TODO 步驟 9: 整合 Travis CI [%]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 9-整合-travis-ci
    :END:

- [ ] 加入 eslint 當做測試項目

*** DONE 步驟 10: 加入 [[https://github.com/ReactTraining/react-router][React-Router]] [66%]
    CLOSED: [2020-03-11 三 14:44]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 10-加入-react-router
    :END:

    - Note taken on [2020-03-12 四 10:30] \\
      目前作法並不是很好，這要求了`XHeader`必須配合`Router`

- [X] 將首頁 nav 的導覽項目做成各個 router page, 並可以有 single page
   render(SPA) 的效果
- [X] 新加入的 router page 不需實作該頁內容, 只需標註是哪一頁即可
- [ ] 需有當前網頁路徑的 nav list hightlight 的效果

*** DONE 步驟 11: fetch api 資料串接 [100%]
    CLOSED: [2020-03-13 五 18:43]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 11-fetch-api-資料串接
    :END:

- [X] 使用 React 製作 [[https://5xruby.tw/posts][/posts]] 頁面, 資料來源請使用 [[https://jsonplaceholder.typicode.com/][jsonplaceholder]]
- [X] 使用 React 製作 pagination component 需達成以下要求：
  - [X] 必須是一個獨立且可引入使用的 component
  - [X] 至少需要有 =首頁=、=末頁=、=下一頁= 按鈕功能
- [X] 一頁 post 資料比數最多顯示 4 筆

*** TODO 步驟 12: 錯誤處理 [%]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 12-錯誤處理
    :END:

- [ ] 使用 [[https://reactjs.org/docs/higher-order-components.html][HOC]] 與 [[https://reactjs.org/docs/error-boundaries.html#introducing-error-boundaries][Error Boundaries]] 替 =/post= 頁面製作 fetch api 拿不到資料的錯誤處理
- [ ] 錯誤處理的效果顯示自行定義

*** TODO 步驟 13: 使用 [[https://reactjs.org/docs/context.html#api][React Context Api]] refactor component [%]
    :PROPERTIES:
    :CUSTOM_ID: 步驟 13-使用-react-context-api-refactor-component
    :END:

- [ ] 了解 context api 使用時機, 並在現有程式碼尋找哪個 component 適合使用
   context api 並以此做 refactor
- [ ] 此步驟可以隨時安插在其他步驟實作

*** TODO （番外篇）選修課題 [%]
    :PROPERTIES:
    :CUSTOM_ID: 番外篇選修課題
    :END:

- [ ] [[https://reactjs.org/docs/render-props.html][react render props]]:
   可替代 HOC 的另一種程式碼共用手法。
- [ ] react: 用 create-react-app 建立一個新的專案，並研究用
   [[https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#npm-run-eject][npm
   run eject]] 產生出來的 webpack 設定檔與步驟七手刻的版本有哪些差異？
- [ ] react application test： https://jestjs.io/docs/en/tutorial-react
- [ ] redux (container、action、reducer)
- [ ] react: credit card form (信用卡表單)
- [ ] react: infinite scroll
- [ ] react: popup video
